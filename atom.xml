<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.hacking.icu</id>
    <title>近之的博客</title>
    <updated>2020-07-29T08:15:54.489Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.hacking.icu"/>
    <link rel="self" href="https://blog.hacking.icu/atom.xml"/>
    <subtitle>或长或短终有尽头，且走且停绝无退路。</subtitle>
    <logo>https://blog.hacking.icu/images/avatar.png</logo>
    <icon>https://blog.hacking.icu/favicon.ico</icon>
    <rights>All rights reserved 2020, 近之的博客</rights>
    <entry>
        <title type="html"><![CDATA[遛狗一样溜自己]]></title>
        <id>https://blog.hacking.icu/post/liu-gou-yi-yang-liu-zi-ji/</id>
        <link href="https://blog.hacking.icu/post/liu-gou-yi-yang-liu-zi-ji/">
        </link>
        <updated>2020-07-25T18:10:31.000Z</updated>
        <content type="html"><![CDATA[<p>我们有时候很奇怪，对一个人无节制的好，而对自己却特别吝啬。对人如此，对宠物也是如此。如果你养了一只猫，你会买一根羽毛，寻她开心。如果你养了一只狗，你会每天找个时间带他去散步。反过来，自己有多久没有存粹的去玩过了，笑过了？自己有多久没有安安静静地漫步于小道，融入寂静的夜色中了？</p>
<p>我们需要像遛狗一样溜自己，只为了像逗猫一样寻自己的开心。</p>
<p>我们有时候会很奇怪，就像我们的父母一样。他们大半生的时间都投入到了养育教育自己的子女的繁重任务中去。从而忽视了自己，自己的生活也需要照顾，甚至自己的人生也需要学习。</p>
<p>我们要像养育孩子一样养育自己，也需要学习更先进的教育理念、更合适的教育方式来教育自己。</p>
<p>我出了校门，那时还二十出头。这些年，我不断地去学习技能，获取生存于现实的能力。尽管，也曾被打击，也曾被嘲讽，但也坚持到现在。我不会放弃对自己的教育的投入。如今，和前几年是有些不同了，生存的压力少小了些，生活的压力大了。如何让生活更加丰富一些，如何在工作中做出些成绩成了我最核心的研究课题。</p>
<p>两三个月前，我买了一只 iWatch 手表，通过这种方式去激励自己去运动。在上班的路上，可以加快脚步。在下班的路中，规划回家锻炼的途径和时间。可以是在马路上，也可以是小区里，更喜欢在跑步机上。</p>
<p>我会买一本书，去了解运动本身。我想知道，当我开始运动的时候，我的身体发生了什么变化。我会取下眼镜，离开手机，静静地在跑步机上凝视前方，审视自己的内心。我会不断地告诫自己，保持运动的姿态，不要回头看。我会关注自己身体的反馈，注意休息。我不再频繁地去测量体重，照镜子。我不在乎减去了多少肉，我在乎的是我做到了更好的我自己。</p>
<p>总之，不要做一个奇怪的人，向遛狗一样溜自己，像教育孩子一样教育培养自己。人生无常，珍惜自己活着的分分秒秒。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[做最坏的打算]]></title>
        <id>https://blog.hacking.icu/post/zuo-zui-pi-de-da-suan/</id>
        <link href="https://blog.hacking.icu/post/zuo-zui-pi-de-da-suan/">
        </link>
        <updated>2020-07-24T19:27:33.000Z</updated>
        <content type="html"><![CDATA[<p>晚上和老大在谈项目进度的时候，他说到要相信大家能完成。我说好，虽然并不认同。</p>
<p>有时候，所谓的相信是一种鸵鸟心态，把头埋在沙子里就行了吗？我们应该做最坏的打算，尽可<br>
能地努力。</p>
<p>我明白这个项目让大家都很难受，即是日日加班导致身体上的疲惫，也是一天天延期导致精神上的焦虑。但是，现实如此，我们应该怎么做？</p>
<p>接下来可能会有一场大的变动，大家需要做一次是去是留的抉择。我希望大家都能在一起走的更远，但对我来说也应该做最坏的打算：环境有些动荡，下半场际遇未卜，要面对项目的失败和人员的变动。如果我们仍然可以全员一起走下去，那是缘分，是现实给予的侥幸。</p>
<p>从个人层面来说，要做最坏的打算。最近也会和同事聊聊时政新闻，面对其中透露出的动荡不安，我们也应该做最坏的打算。</p>
<p>就像我和同事说的，台湾的新闻和新闻联播一样，看起来很爽，台湾或者中国的今天都很辉煌，明天很灿烂。事实却并不如此，甚至让人感到焦虑。</p>
<p>今天，外交部刚刚宣布关闭美国驻成都的领事馆，以对等回应其关闭中国驻休斯顿的领事馆。大部分观点都认为这是特朗普的竞选策略，也少有人否认。但我们并不能因为这是一种精选策略就忽略了其他因素，或许那才是更重要的：中美的竞争是趋势且难以避免。</p>
<p>我们现在要思考的是，这会不会演变成一场不可控的热战，而是这场热战将会在何时开打？所以，应该加速为此做军事上的准备，而并不仅仅是“内循环”就可以保障安全的。正如孙子曰：兵者，国之大事，死生之地，不可不察也。</p>
<p>最近环球时报的主编胡锡进再次提出了中国应该提升核武库数量以及质量，以增加战略威慑力。不久前他也提过，只是当时遭到了包括军控专家以及前驻外大使的批评，认为是反军控、反和平。我认为，这样的说法在之前中美保持斗而不破的时候，是合理的。而如今，就应该做最坏的打算。不再是斗而不破了，而是随时都可能会破。我们模糊的核战略是有效的，也应该支持模糊的核战略和不首先使用核武的承诺。但是300枚和1000枚都可以是模糊的。增加核武反而是安全的，维持现状维持所谓的和平反而是理想的。</p>
<p>在经济，粮食乃至军事上，都应该做最坏的打算。从这个角度来说，我认为应该努力升级核武库，使之现代化，实战化，我认同胡锡进的讲法。和平太久，部分人会沉迷于和平带来的纸醉金迷中，畏惧战争，甚至向自己的敌人卑躬屈膝祈求仁慈。也就是这些人，可谓之和平之蛀虫。</p>
<p>从个人到国家，都应该做最坏的打算，尽可能的努力。未来可期，故忧于现在。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[蝶影重重]]></title>
        <id>https://blog.hacking.icu/post/die-ying-chong-chong/</id>
        <link href="https://blog.hacking.icu/post/die-ying-chong-chong/">
        </link>
        <updated>2020-07-23T20:17:25.000Z</updated>
        <content type="html"><![CDATA[<p>蝴蝶我也是很喜欢拍摄的，特别是近距离的拍摄，让它充分地展现在镜头下。这样地机会是不多地，大部分地蝴蝶都比较敏感。</p>
<figure data-type="image" tabindex="1"><img src="http://api.mock.end.wiki/2020-07-24%20042006.png" alt="image" loading="lazy"></figure>
<p>这可能不是蝴蝶，可能是一直乖乖得飞蛾......</p>
<figure data-type="image" tabindex="2"><img src="http://api.mock.end.wiki/2020-07-24%20042240.png" alt="image" loading="lazy"></figure>
<p>光拍摄蝴蝶可能看久了也会厌倦，如果加上一丛花的话:</p>
<figure data-type="image" tabindex="3"><img src="http://api.mock.end.wiki/2020-07-24%20043021.png" alt="image" loading="lazy"></figure>
<p>万花丛中，你只取一束？</p>
<figure data-type="image" tabindex="4"><img src="http://api.mock.end.wiki/2020-07-24%20043158.png" alt="image" loading="lazy"></figure>
<p>2014 年夏天拍摄于永嘉，那天正中午，我在村落中发现了看到了它。天气很热很热，但是它却冷静的很，给了我如此近距离拍摄它的机会，足足有好几分钟。我整个人趴在滚烫的石子路上，珍惜和它的短暂的相处时光。请记住它的名字: 青木兰凤蝶。</p>
<figure data-type="image" tabindex="5"><img src="http://api.mock.end.wiki/2020-07-24%20044226.png" alt="image" loading="lazy"></figure>
<p>这应该是一只凤蝶，玉带凤蝶。但是玉带凤蝶的外观色彩可能相差比较大，所以并不能完全确认就是它:</p>
<figure data-type="image" tabindex="6"><img src="http://api.mock.end.wiki/2020-07-24%20044714.png" alt="image" loading="lazy"></figure>
<p>飞入菜花无处寻？还是被我找到了：</p>
<figure data-type="image" tabindex="7"><img src="http://api.mock.end.wiki/2020-07-24%20050514.png" alt="image" loading="lazy"></figure>
<p>宁可枝头抱香死？何曾吹落北风中！</p>
<figure data-type="image" tabindex="8"><img src="http://api.mock.end.wiki/2020-07-24%20043548.png" alt="image" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我又开始写日记了]]></title>
        <id>https://blog.hacking.icu/post/wo-you-kai-shi-xie-ri-ji-liao/</id>
        <link href="https://blog.hacking.icu/post/wo-you-kai-shi-xie-ri-ji-liao/">
        </link>
        <updated>2020-07-23T16:44:48.000Z</updated>
        <content type="html"><![CDATA[<p>我是喜欢写日记的，从小学断断续续到大学，直到大一期末的时候。</p>
<p>在工作之后，我又开始写日记了，也不知道什么时候又断了。</p>
<p>如今我又开始了，有些话只能说给自己听，有些话也只有听自己的。</p>
<p>说心里话，我的生活并不如意。虽然，我确实希望得到别人，特别是家人的喜欢。尽管，这样看似简单的希望，却难以得到满足。这大概也是我不如意的生活的一部分吧。</p>
<p>生活不如意，工作也是不如意的。虽然，我如愿以偿得到了不低的薪水，虽然我真正地去管理带领一个对我来说不小的团队，但在将近一年的时间里，我并没有让这个团队达到预期的健壮。从而，我是失职的，更是辜负了自己对自己的期望。尽管我仍然在努力。</p>
<p>生活和工作都不尽如人意，我却不能因此而气馁，仍需努力。因为不尽如人意的生活也是我人生观的一部分，而靠努力去获取一些些满足则是我价值观的一部分。所以，这是自然的，也是理想的，更是现实的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 中的面向对象编程]]></title>
        <id>https://blog.hacking.icu/post/python-zhong-de-mian-xiang-dui-xiang-bian-cheng/</id>
        <link href="https://blog.hacking.icu/post/python-zhong-de-mian-xiang-dui-xiang-bian-cheng/">
        </link>
        <updated>2020-07-15T13:00:55.000Z</updated>
        <content type="html"><![CDATA[<p>学习面向对象，如果一开始就从理论说起，可能会非常难以理解。所以，我尝试从语法层面说起，这样可能更好理解一些</p>
<h3 id="什么是类">什么是类</h3>
<p>在说面向对象之前，需要先从类( Class ) 说起，因为是先有类，再有对象的。我们可以创建一个类:</p>
<pre><code class="language-python">class Person:
    name = 'Bob'
    age = 14
    
    def go():
        print('go')
</code></pre>
<p>比如 <code>name</code> 、 <code>age</code> 都是类的属性，也可以理解成类当中的变量(叫做属性)。类当中还有一个函数(这样的说法不准确，类当中的函数叫做方法) ，叫做 <code>go</code> 。</p>
<p>通过上面这个例子，我们可以来给类从语法层面下一个定义了:</p>
<blockquote>
<p>所谓的类，一种数据类型，包含变量和方法。</p>
</blockquote>
<p>说类也是一种数据类型，就像列表一样。我们来看看如何声明一个列表:</p>
<pre><code class="language-python">pers = ['bob', 'june']
</code></pre>
<p>你看，列表是一组数据的集合。那么对象呢?和列表不一样的是，它是变量(属性)和函数(方法)的集合。我们访问列表中的元素:</p>
<pre><code class="language-python">print(pers[0])  # bob
</code></pre>
<p>我们访问对象中的属性：</p>
<pre><code class="language-python">print(Person.name)
</code></pre>
<p>所以，从语法层面而言，不要把类看得很特殊，其实和列表、字典之类的数据类型没什么区别。 <strong>所以，我们说类本质上只是一种数据类型罢了。</strong> 如果是面试，说的好听点: <strong>从数据结构的角度来看，</strong> <strong>类是对数据和行为的封装</strong> 。</p>
<h3 id="什么是对象">什么是对象</h3>
<p>对象是从哪里来的？不是来源同桌，也不是来源于婚恋网站哦。在编程中，对象的来源只有一种，通过类生成一个对象（也叫做实例化）。所以，从语法上来说，对象是对类的拷贝。</p>
<blockquote>
<p>这实例化的概念，其实和现实世界不一样。因为现实世界中，我们是先有人，然后根据人的共同特征行为抽象出一个人类的概念。而在编程中，是先有类，然后根据类复制出一个具体的人。所以，这一点是和现实世界相反的。</p>
</blockquote>
<p>然后实例化的语法如下:</p>
<pre><code class="language-python">class Person:
    name = ''
bob = Person()
</code></pre>
<p>单纯是类其实没什么意义，只有将类编程具体的人才是又意义。因为这个世界说到底，人类这个词还是由具体的某个人发明的。</p>
<h3 id="什么是面向对象编程">什么是面向对象编程</h3>
<p>从语法层面来说，Python 中的一切元素都是对象。其他的类型也是对象的一种子类型，举个例子，字符串也是一种对象:</p>
<pre><code class="language-python">message = 'String'
print(message.upper())  # STRING
</code></pre>
<p>从上面这个例子中，我们可以发现字符串也有行为(方法)。所以，什么是面向对象编程？ <strong>从语法层面来说，把编程语言中所有的实体(变量、类型、方法、表达式等)都作为对象， 然后我们使用各种对象进行编程。我们将这种做法称之为面向对象编程</strong> 。</p>
<h3 id="什么是构造方法">什么是构造方法</h3>
<p>一个类当中，只有两种东西，属性和方法，没有其他。很明显构造方法也是类的一个方法。而且构造方法也是一个特殊的方法。为什么说 <strong>构造方法是特殊的方法，因为这个方法由特殊的语法作用： 一般用来初始化对象</strong> 。</p>
<p>当我们通过一个类复制出一个对象的时候(实例化), Python 就会去主动运行这个构造方法。我们自己定义的方法，必须在程序中手动的调用，而构造方法会在实例化的时候，由 Python 语言本身(解释器) 去执行它，而且构造方法的方法名称，必须是 <code>__init__</code> 。这就是它的特殊之处，用代码来演示:</p>
<pre><code class="language-python">class Person:
    name=&quot;&quot;
    def __init__(self, name):
        print(name)
        
    def say():
        print(&quot;say&quot;)
Person(&quot;Bob&quot;)
</code></pre>
<p>执行这段程序，只会输出 <code>Bob</code> ，但是在程序中，我们并没有手动的去调用 <code>__init__</code> 这个方法，这说明 Python 在 <code>Person('Bob')</code> 实例化的时候，会自动执行 <code>__init__</code> 方法。正如这个构造方法的方法名字(init)一样， <strong>我们通常会利用它会在实例化的时候自动执行这个特性，去初始化这个类的属性</strong> 。</p>
<p>实际上，我们练习一下现实生活，每个孩子生下(实例化)的时候，就有双手双脚双眼双嘴(属性)。实际上，正是为了模拟现实中的这种情况，所以会有一个构造方法，来做这件事情。</p>
<p><strong>切记: 编程是用来模拟现实的，在模拟现实的基础上，解决一些现实问题， 所以在学习编程的过程中，要时常地联系现实生活</strong>。</p>
<h3 id="类变量和实例变量">类变量和实例变量</h3>
<p>我们首先来定义一个类:</p>
<pre><code class="language-python">class Duck:
    # 定义在这个位置的称之为类变量
    age = 2
    def __init_(self, name):
        # 定义在这个位置，称之为实例变量
        self.name = name
</code></pre>
<p>关于类变量和实例变量，Python 语言和其他语言是很不一样的。Python 是根据定义的位置加以区分的，而其他语言可能会有特定的的关键字加以区分。下面以 PHP 为例:</p>
<pre><code class="language-php">class Duck {
    static $age = 2;   ## 类变量
    $name = '';        ## 实例变量
}
</code></pre>
<p>所以，关于类变量和实例变量，不能参照其他语言的经验。</p>
<p>当我们去打印一个对象的变量的时候，会按照如下顺序去查找:</p>
<ul>
<li>先查找实例变量</li>
<li>如果实例变量没有找到，会查找类变量</li>
<li>如果类变量没有找到会查找继承的变量</li>
</ul>
<p>类或实例中地方法，在大多数时候是为了改变类的数据（也称之为类的状态）。所以，如何在类的方法中访问类变量或者实例变量呢？</p>
<pre><code class="language-python"> class DuckDuckGo:
    url = ''
    def __init__(self, method = 'POST'):
        # 访问实例变量
        print(self.method)
        # 访问类变量
        print(DuckDuckGo.url)
        print(self.__class__.url)
</code></pre>
<h3 id="实例方法-类方法和静态方法">实例方法、类方法和静态方法</h3>
<h4 id="实例方法">实例方法</h4>
<p>什么是实例方法， 就是我们在类方法中，将第一个参数定义为 <code>self</code> (也可以是其他的单词，比如说 <code>this</code> , 但 Python 推荐我们使用 <code>self</code>这个单词)。</p>
<p>Python 会在我们调用这个方法时候，给个名为 <code>self</code> 的变量赋值，这个值就是当前调用这个方法的对象的实例。</p>
<p>如果有其他的编程语言的经验，其他语言中会使用 <code>this</code> 这个关键字来表示当前实例，Python 也一样只是需要在方法声明的第一个传参显式地定义为 <code>self</code> 。</p>
<pre><code class="language-python">class DuckDuckGo:
    def search(self):
        pass
</code></pre>
<h4 id="类方法">类方法</h4>
<p>类方法的定义如下, 使用 <code>@classmethod</code> 注解来声明一个方法是类方法:</p>
<pre><code class="language-python">class DuckDuckGo:
    url = 'https://www.duckduckgo.com'
    
    @classmethod
    def settings(cls):
        print(cls.url)
</code></pre>
<p>和实例方法要在传参的列表中加入 <code>self</code> 一样，类方法也要在传参列表中添加一个名为 <code>cls</code> 的传参。这个名字也是约定俗成的，虽然也可以使用其他的名字。</p>
<p>调用类方法如下:</p>
<pre><code class="language-python">DuckDuckGo.settings()
</code></pre>
<h4 id="类方法和实例方法的区别">类方法和实例方法的区别</h4>
<p>那么类方法和实例方法有什么区别呢？**类方法关联的是类本身，而实例方法关联的是实例本身。**这句话是不是好理解？我举一个例子: 当我们和别人谈论中午吃什么的时候，指的是我自己中午吃什么。而当国家领导人和欧盟主席谈论国际粮草供应的时候，讨论的是人类吃什么，而不是他们两个人中午吃什么。</p>
<p>怎么什么时候用对象方法，什么时候用实例方法呢？当你想要改变实例变量的时候，用实例方法。当你想要改变类变量的时候，使用类方法。</p>
<blockquote>
<p>注意: 在 Python 中，我们可以在实例方法中，改变类变量，也可以使用实例对象来调用类方法。但是并不建议这么做，虽然语法上允许这么做，但是违反了类和对象实例的语义。</p>
</blockquote>
<h4 id="静态方法">静态方法</h4>
<p>静态方法的定义语法如下:</p>
<pre><code class="language-python">class DuckDuckGo:
    url = 'https://www.duckduck.com'
    @staticmethod
    def ping():
        print(DuckDuckGo.url)
</code></pre>
<p>那么静态方法和类方法以及实例方法的区别？</p>
<p>最大的不同在于，静态方法并没有向类方法和实例方法一样要传入一个类似于 <code>self</code> 和 <code>cls</code> 这样的传参。另外，静态方法，可以同时通过类或者实例对象取调用。</p>
<pre><code class="language-python">DuckDuckGo.ping()
ddk = DuckDuckGo()
ddk.ping()
</code></pre>
<p>类方法和静态方法都是可以使用类变量，但是不能调用对象方法。</p>
<p>在其他的语言中，静态方法和类方法是一样的。但是在 Python 中，将其区分开来了。**并不建议在实际的编程中使用静态方法，因为它和类以及对象的关联是很弱的。**基本上，静态方法都可以使用类方法代替。</p>
<h3 id="属性和方法的可见性">属性和方法的可见性</h3>
<p>在面向对象的设计中，属性和方法是可以设置可见性的（你可以理解成，我不想让别人看到我的心）。在 Python中，可见性分为 Public(公开), Private（私有) 两种。<br /></p>
<p>区别与其他的语言，并没有类似于 Public 或者 Private 这样的关键字的修饰，而是使用双下划线的方式区分是否为公开或私有的属性方法:</p>
<pre><code class="language-python">class DuckDuckGo:
    __url = 'https://www.duckduckgo.com'
    
    def __dns():
        pass
</code></pre>
<p>如果你调用私有的 <code>__dns</code> 方法，Python 会给出错误的提示:</p>
<pre><code class="language-python">&gt;&gt;&gt; DuckDuckGo.__dns()
Traceback (most recent call last):
  File &quot;test.py&quot;, line 9, in &lt;module&gt;
    DuckDuckGo.__dns()
AttributeError: type object 'DuckDuckGo' has no attribute '__dns'
</code></pre>
<p>如果你调用私有的变量，同样也会报错:</p>
<pre><code class="language-python">&gt;&gt;&gt; print(DuckDuckGo.__url)
Traceback (most recent call last):
  File &quot;test.py&quot;, line 9, in &lt;module&gt;
    print(DuckDuckGo.__url)
AttributeError: type object 'DuckDuckGo' has no attribute '__url'
</code></pre>
<p>我们可以通过打印对象的 <code>__dict__</code> 来查看对象的所有的成员变量:</p>
<pre><code class="language-python">&gt;&gt;&gt; print(DuckDuckGo.__dict__)
...省略...'_DuckDuckGo__url': 'https://www.duckduckgo.com', '_DuckDuckGo__dns': &lt;function DuckDuckGo.__dns at 0x7f27771ae0d0&gt;
</code></pre>
<p>从上面的输出可以看到，Python 内部处理私有的属性和方法，是将我们的属性和方法重命名为 <code>_类名+变量/方法名</code> , 例如 <code>_DuckDuckGo__url</code> 和 <code>_DuckDuckGo__dns</code> 。<br /></p>
<p>所以，其实没有什么是不能访问的，私有的也是可以访问的。之所以我们访问的时候报错，是因为 Python 将我们的私有变量重命名了。如果要访问，也是访问重命名之后的变量或方法:</p>
<pre><code class="language-python">&gt;&gt;&gt; print(DuckDuckGo._DuckDuckGo__url)
https://www.duckduckgo.com
</code></pre>
<p><strong>所以，严格意义上来讲，Python 并没有对成员变量或方法的可见性设置一种可靠的机制来禁止其他实体的对其进行访问。</strong></p>
<h3 id="继承">继承</h3>
<h4 id="什么是继承">什么是继承</h4>
<p>其实我们在之前地例子中，我们已经使用过继承了。我们自己创建了一个类 <code>Person</code> , 在这个类中有一个特殊地方法，我们叫它为构造方法 <code>__init__</code> 。那么这个名为构造方法地方法是从哪里来地呢？是从继承得到的。那么它是继承谁的呢？继承一个名为 object 的对象的。这个对象是 Python 语言本身提供的对象，所有其他的对象都默认继承这个对象:</p>
<pre><code class="language-python">class Person(object):
    pass
class Person:
    pass
</code></pre>
<p>上面两种写法是一样，默认情况下，我们创建的类就是继承 object 类的。object 类当中声明了一些类似于 _ <em>init</em>_ 这样的方法，这些方法都会在特定的时候，由 Python 语言本身去调用。<br /></p>
<p><strong>继承这个概念，也是来源于生活的。我一生下来，就继承了我爸爸妈妈的部分基因</strong> <strong>，这也是编程中的继承在语法层面的含义</strong> 。</p>
<p>我们再来举一个例子:</p>
<pre><code class="language-python">class Person(object):
    def say(self):
        print('say')
class Father(Person):
    def teach_kids():
        print('teach')
bob = Father()
bob.say()      # say
</code></pre>
<p>这个程序运行之后，输出了 say 。可是我们在 Father 这个类中，并没有声明一个 say 的方法，却可以调用，这是为什么呢？因为 Father 这个类继承了 Person 这个类，而 Person 这个类声明了 say 这个方法，被 Father 类继承。 <strong>所以，我们说继承从语法层面来说，是为了实现类的属性或方法的复用</strong> 。</p>
<p>然后，这个 Father 类自己还有一个名为 <code>teach_kids</code> 的方法，意思是教育孩子。Father 不光是继承了 Person 类的 say 方法，而且还延申扩展出了教育孩子的行为能力。 <strong>所以，继承还能扩展类的能力，这也是符合现实情况的，我们有句话叫做青出于蓝而胜于蓝，就是这样的道理</strong> 。</p>
<h4 id="什么是重写">什么是重写</h4>
<p>上面的例子中，Person 拥有 say 方法，而 Father 自动继承了 Person 的 say 方法。那么如果 Person 有 say 方法， Father 自己也有 say 方法呢？</p>
<pre><code class="language-python">class Person(object):
    def say(self):
        print('Person say')
class Father(Person):
    def say(self):
        print('Father say')
my_father = Father()
my_father.say()       # 这里输出是 Person say 还是 Father say 呢？
</code></pre>
<p>当然，输出的是 Father say 啦。 <strong>因为如果父类(Person) 和子类(Father) 都有相同一个方法，那么子类中的方法会重写父类中的方法</strong> 。</p>
<p>这样例子，在现实生活中，也比比皆是。举个例子: 我父亲的足球踢得很好，而我并没有继承我父亲的这个基因，虽然也会踢足球，但是提的不好。所以，没有道理，我一定要和我父亲一样能踢好足球。说到底，我虽然继承了我父亲的一些基因，但是我终究是我自己，以我自己的实际情况为准，而不是父亲的复制品。</p>
<h4 id="站在巨人super的肩膀上">站在巨人（super）的肩膀上</h4>
<p>“如果我看得比别人更远，那是因为我站在巨人的肩膀上。”这是牛顿说的。有时候，我们利用继承可以站在巨人的肩膀上，利用巨人的能力使得自己做的更好。我们用代码来说明:</p>
<pre><code class="language-python">class SuperMan(object):
    def see(self):
        print('I see the darkness')
class My(SuperMan):
    def see(self):
        super().see()
        print('I saw the light')
my = My()
my.see()
</code></pre>
<p>运行这个程序，输出结果如下:</p>
<pre><code>I see the darkness
I saw the light
</code></pre>
<p>SuperMan 拥有一个方法，叫做 see，这个方法输出一句话：I see the darkness(我看透了黑暗)。My 继承了 SuperMan 并且重写了这个 see 的方法，在我这个 see 的方法中，我可以使用 <code>super().see()</code> 这样的语法调用我继承的父类，也就是 SuperMan 的方法，并且输出一句话: I saw the light(我看到了光明)。</p>
<p>这就是我说的，站在巨人的肩膀上，不光看透了黑暗，还看到了光明。</p>
<h4 id="重写和super的语法意义">重写和super的语法意义</h4>
<p>首先重写和 supper 的特性都是基于继承的。</p>
<p>重写的意义在于，如果子类和父类都具有相同的一个方法，那么子类的方法会重写父类，换句话说， <strong>子类调用自己的方法的时候，不会去执行父类中的同名方法</strong> 。</p>
<p>而 super 呢？它的语法意义在于，它可以让子类自己选择是否继承并使用父类的方法，换句话说， <strong>super 这个关键字使得子类可以使用父类的能力，并且做更多的事情</strong> 。</p>
<h4 id="多重继承">多重继承</h4>
<p>在现实的生活中，多重继承是在正常不过的行为。比如我爸妈生了我，我继承了我爸妈各自的部分基因。</p>
<p>但是，现在大多数实现了面向对象思想的编程语言都放弃实现多重继承的特性，比如 Java、PHP 都不支持多重继承。</p>
<p>Python 是支持多重继承的，但大多数的人都认为要避免使用多重继承，因为这比较麻烦。举个例子，你同时继承了你妈妈的个性和你爸爸的个性，而你自己有没有衍生出自己的个性，那么你以谁的个性为准？是爸爸的，还是妈妈的？</p>
<p><strong>所以，在实际的编程中，也无需使用多重继承，至于其语法，不了解也没有关系。</strong></p>
<h4 id="总结">总结</h4>
<p>继承是为了代码的复用，而重写是为了复用的同时不影响子类自己的发展，而 super 则是允许子类在自己选择是否保留父类的能力，还能展现自己的个性 。</p>
<h3 id="魔法方法special-method">魔法方法(Special Method)</h3>
<p>魔法方法，这个名字有两个词语组成，分别是魔法和方法。</p>
<blockquote>
<p>有的人会称之为魔法函数，这是不准确的。因为函数是定义在类之外的，而魔法方法只能是定义在类当中的。在 Python 的官方文档中，写的是 Special Method (其日文是 特殊メソッド)，不是 Special Function, 所以应该翻译成魔法方法，而不是魔法函数。</p>
</blockquote>
<p>什么是魔法？魔法就是一些看上去很神奇的操作或事情，换句话说就是普通函数无法实现的能力。在对象中定义的函数称之为方法，而魔法方法一定是定义在对象中的。</p>
<p>其实魔法方法，还具有一个特性： <strong>不需要我们在代码中主动的调用，而是在某些特定时刻由 Python 解释器调用的方法</strong> 。上面的例子中的 <code>__init__</code> 即使如此。</p>
<pre><code class="language-python">class Person(Object):
    def __init__(self, name):
        self.name = name
</code></pre>
<p>然后当我们实例化这个对象的时候，这个 <code>__init__</code> 就会自动执行，为 <code>self.name</code> 赋值。</p>
<p>然后再举一个魔法方法的例子:</p>
<pre><code class="language-python">class Person(Object):
    def __init__(self, name):
        self.name = name
    def __repl(self, name):
        return &quot;My name is &quot; + self.name
</code></pre>
<p>当我们打印这个类的实例化对象的时候，就会自动执行 <code>__repl__</code> 魔法方法，并输出 <code>My name is ......</code>:</p>
<pre><code class="language-python">p = Person('admin')
print(p)  ## My name is admin
</code></pre>
<p>国内是翻译成魔法方法，但是其日文是 <strong>特殊メソッド</strong> , 翻译成中文是 <strong>特殊方法</strong> ，而翻译成魔法方法不是非常好理解。说是特殊方法比较好理解，特殊在哪里呢？</p>
<ul>
<li>必须出现在类当中，方法名以双下划线开头，以双下划线结尾</li>
<li>无需手动调用，由 Python 解释器在特定的时机去调用</li>
<li>实现特定的功能，比如因为 <code>__init__</code> 在对象被实例化的时候被执行，所以非常适合做一些初始化属性的事情</li>
</ul>
<p>Python 中由很多类似的魔法方法，无需一次性记住，但是需要知道其原理以及应用。在其他的弱类型语言，比如 PHP 中，也有类似的实现。这样的实现是为了增加代码的灵活性。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[冠状病毒在蔓延]]></title>
        <id>https://blog.hacking.icu/post/guan-zhuang-bing-du-zai-man-yan/</id>
        <link href="https://blog.hacking.icu/post/guan-zhuang-bing-du-zai-man-yan/">
        </link>
        <updated>2020-03-15T22:56:43.000Z</updated>
        <content type="html"><![CDATA[<p>疫情在地理上出现了戏剧化的转变，我宁愿他从来没有出现过。</p>
<p>假如疫情没有出现，现在是否会更好？疫情席卷后，这个世界是否会变得更好？这都取决于人们反思的深度和广度。</p>
<p>中国民众，处在专制体制下的民众，开始了反思，为什么会有李文亮这个不是英雄的英雄？是否是因为其背后那张无形的手总是试图掩盖真实的口？</p>
<p>中国民众，也开始了一定程度的反抗。他们试图发声，或是用英文、火星文、盲文、表情文，或是无声的抗议。</p>
<p>西方也有媒体开始反思，疫情是否偏爱专制体制？若是如此，疫情为什么会在意大利、西班牙这样民主富裕的国度蔓延？台湾香港的民众是否会注意到这样的反差，这那个动不动就就民主万岁，专制必死的舆论中。</p>
<p>共产党会不会也在反思？他们一边痛斥美国政要将疫情归咎于中国体制，一边又在疫情缓解之后开始宣扬自己体制的优越性，是否矛盾？下一次疫情在什么时候？是否仍要付出数以千计家庭破碎，阴阳两隔的代价才能凸显出共产党的伟大？是否还会塑造出李文亮式的可能？是否会学着虚心和敬畏？</p>
<p>疫情是一面镜子，映照出种种的善与恶。万千隔离在家的人们？形式主义也好、官僚主义也好、共产主义也罢、民主自由也罢的政客以及公仆们？那些高高在上、一言九鼎不容置疑的领袖们？那些口口声声在疫情之出要以罢工作为威胁，却在西方疫情泛滥时候噤若寒蝉的泛民以及工会们？那些在疫情之处就封锁边境禁止医疗物资处境的政府们？那些在疫情蔓延却仍然捐赠医疗物资给其他国家地区的政府们？那些销声匿迹的吹哨者们？哪些被就地免职却升迁他处的大人们？哪些默默无闻抗疫抗灾的普通民众们？</p>
<p>其中的事情，难以一一列举，却无不悲喜交加。笑罢哭罢，这个世界依然按照其既定有复杂的思维逻辑以及行为方式继续运转着。人们终将送走这场疫情，也不可避免地将会迎战下一场灾难。人终究是这些那些人，真相和利益之间的冲突、权利在其中的作用， 是会愈演愈烈还是走向和解？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[丹麦媒体发表病毒国旗事件]]></title>
        <id>https://blog.hacking.icu/post/dan-mai-mei-ti-fa-biao-bing-du-guo-qi-shi-jian/</id>
        <link href="https://blog.hacking.icu/post/dan-mai-mei-ti-fa-biao-bing-du-guo-qi-shi-jian/">
        </link>
        <updated>2020-01-31T04:13:58.000Z</updated>
        <content type="html"><![CDATA[<p>我看到有些人同样丑化了丹麦的国旗，我认为这种以以其人之道还治其人之身的做法很好。</p>
<p>长期以来，中国政府以及人民在国际舆论场上的音量是十分卑微的。究其原因，很大程度是是价值观的差异，以及西方强大的舆论态势。所以，以孔子学院为代表的论述方式，现在已然被证明是不可靠的。宣传的方式势必需要革新，其中最重要的就是要说对方听得懂的语言。就像在战争中劝降，你需要使用敌方的语言一般。</p>
<p>简单来说，就是西方讲人权，我们也要讲人权。西方讲自由我们也要讲自由。当他们可以拿着我们的国旗作画的时候，我们同样可以在他们的国旗上涂鸦。</p>
<p>事实上各种抗议游行中，最先烧毁的往往就是国旗。而在这些被涂鸦烧毁的国旗中，美国占了很大的比例。这是因为美国强大，强大到他的利益延伸到了全世界，反之也触犯到了很多其他人的利益。所以，虽然中国的崛起，中国国旗的出镜场景以及次数会越来越多。对于这种情况，我们应该更加自信以及更加灵活处理。不一定要动用官方宣传机器给予回应，否则美国白宫外交部会天天因为国旗被引用而对外抗议。所以，对此只要同等方式对待对方的国旗就可以了。</p>
<p>国旗如此，面对游行抗议连侬强各种宣传海报也一样的道理。不要去试着组织他们，不要去撕毁海报，不要去覆盖对方的舆论。而是以同样的方式去宣传自己。总之，宣传是一场没有硝烟的战争，既然没有硝烟，也就没有急切消灭对方的必要，这是长期的抗争，必定会因为实力的强弱而此消彼长，所以要学着适应，学着在渠道和形式上的创新，而创新源于模仿，即古人说的以其人之道 还治其人之身。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黄之锋接收《南德》采访]]></title>
        <id>https://blog.hacking.icu/post/huang-zhi-feng-jie-shou-lesslessnan-de-greatergreater-cai-fang/</id>
        <link href="https://blog.hacking.icu/post/huang-zhi-feng-jie-shou-lesslessnan-de-greatergreater-cai-fang/">
        </link>
        <updated>2019-11-18T17:29:51.000Z</updated>
        <content type="html"><![CDATA[<p>刚看到《南德》采访黄之锋的报道，黄说到：</p>
<blockquote>
<p>我的责任是，让全世界听到抗议者的声音。我用我的知名度支持运动。我有前线经验，但我不是制造燃烧弹的专家。&quot;&quot;虽然我不参加抗议示威活动，但我用文章和评论援助一线的示威者。</p>
</blockquote>
<p>总的来说，他想表达的是危险的事情我不做，博版面的事情我来做。</p>
<p>《孙子兵法》有云：将者，令民与上同意也。故可与之生，故可与之死，而不畏危也。很显然，黄之锋之流成不了领军者，顶多是代言人罢了。或可以留名于世，但功不在社稷。他要做的是收割抗争果实，走上仕途。 于是他各种博版面，参选立法委员，区议员。</p>
<p>黄之锋，并非像自己所说的，是要为香港人发声。而为香港人发声，确实为了铺平自己的从政之路。至于那些最前线的年轻人，他们一旦被捕，将面临牢狱之灾，赔上前途，其中黄之锋之流有一份功劳，是他从政之路上，一块块的垫脚石。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[香港反送中的第一枪]]></title>
        <id>https://blog.hacking.icu/post/xiang-gang-fan-song-zhong-de-di-yi-qiang/</id>
        <link href="https://blog.hacking.icu/post/xiang-gang-fan-song-zhong-de-di-yi-qiang/">
        </link>
        <updated>2019-10-22T17:37:31.000Z</updated>
        <content type="html"><![CDATA[<p>如你我所见，香港警察的子弹穿过了学生的胸膛。所幸，暂无性命之忧。</p>
<p>这个时候再说什么立场已经没有意义，双方都有各自坚定且不能退让的缘由。</p>
<p>这场行动短期内也不会落幕，示威者中，有的人会后退，有的人会更进一步。双方以及香港的牺牲会进一步扩大。</p>
<p>回到枪击本身，视频很清楚，事实也没有争议：学生袭击警察，警察开枪自卫。至于近距离或是致命，这都不影响事实主干的认定。</p>
<p>我在想，如果没有这段视频，那此时的警察将面对的是排山倒海般的压力。或者那个学生死了，那么警察也会被“偿命”的口号声讨。从这个角度而言，那个学生自己付出了惨痛的代价，却没有左右运动的走向。</p>
<p>被枪击后，那个学生表现出了很强的求生欲望，我相信他并没有想到自己会是第一个牺牲的人。如果能预料到后果，我想他也会后退几步。对于这些“勇武派”来说，大都是中下层的青年，他们勇敢也武断，有理想也莽撞。他们都有呐喊口号的能力，却没有风风雨雨的人生经历。没有人希望被枪击，却又不甘心没有达成目的（五大诉求）。我试图去猜想，那个学生伤愈之后，对警察是恨多一些，还是怕多一些？</p>
<p>对于民主派，他们有他们的立场，无可厚非。但是无可厚非的立场不代表可以不问是非。学生们暴力冲击警察，破坏交通设施，这样的行为是对的吗？你们说这是政府暴政，所以暴力有理。但是，你们的儿女在哪里？是否也一样冲锋在前？还是在英美度假？所以，别人家的孩子死不完，你们的良心在哪里？</p>
<p>如果我是民主派，我是示威者，我建议停止这种内耗式的暴动，走入社区，宣传民主。你们总是骂老人，鼓励年轻人。但是老人总有去的一天，年轻人总有上位的一朝，为什么不再等等？为什么不加大力度深入社区宣传你们的政治理念，而是采用“造反有理”的理论鼓动别人家的孩子冲锋牺牲？进而实现你们自己的理想抱负？<br>
我们都应该理性思考，行动和目的是否一致，而不是一味冲锋，不知进退。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[燃烧的反送中，煎熬的香港]]></title>
        <id>https://blog.hacking.icu/post/ran-shao-de-fan-song-zhong-jian-ao-de-xiang-gang/</id>
        <link href="https://blog.hacking.icu/post/ran-shao-de-fan-song-zhong-jian-ao-de-xiang-gang/">
        </link>
        <updated>2019-10-02T19:35:37.000Z</updated>
        <content type="html"><![CDATA[<p>香港之事愈演愈烈，究竟对谁有好处？除了台湾的民进党，和美国的一部分议员，香港的民阵，泛民，我想不出有别人。你看看这些人在干嘛？义正词严地煽风点火。</p>
<p>整个事件中，行行业业都涉入其中。比较突出的是政客以及媒体，他们共同的特点是都具有强大的话语权左右着人们对事件的认同。</p>
<p>每个人都有自己的观点与立场，有同路人也有异见者。在各执己见甚至大打出手的情况下，是否应该静下来冷静思考，共同的出路在哪里？而不是站在街道两边互骂叫嚣。在这中间，政客基于政治利益上串下跳，而媒体给予自己固有立场删减片段，强化矛盾。为这场混乱添油加醋，煽风点火。大家都在拉偏架。</p>
<p>真实的世界就像正在进行的中美贸易战一般，为了彼此利益相互角力，边打边谈。根本矛盾也许无法立即解决，但是可以搁置争议，大局为重。比如菲律宾不会因为领海争议和中国断交，日本也不会因为竹岛问题和韩国兵戎相见，即使是美国和伊朗，那也是相互测量底线，没把话说死。</p>
<p>所以,香港的抗争者应该放弃“五大诉求，缺一不可”的口号，因为那真的只是一句不可及的口号，除了统一口径振奋人心，别无用处。这个时候，应该以退为进,深入社区和校园（当然北京会进一步遏制）。</p>
<p>而政客和媒体，其实别无办法，他们同样在混乱中不断获取他们所需的养分或是素材，没有人能阻止他们损人利己性的成长。</p>
<p>关于暴力，无论是警察或者勇武者都应该明白这解决不了问题。也许警察可以驱散人群，但是解决不了政治问题。也许勇武者可以博得各种媒体版面，政治支持，但是没办法迫使北京更多让步。即行为和目的不一致。何况，警察的暴力会成为政客媒体声讨的焦点，而勇武者的暴力会给北京政府在外交中以把柄和口实。</p>
<p>所以，双方退一步，即使不会海阔天空，也可以谋定而后动。</p>
]]></content>
    </entry>
</feed>